{
	"info": {
		"_postman_id": "fuel-manager-api-collection",
		"name": "Fuel Manager API Collection",
		"description": "API collection for testing Fuel Manager endpoints with manual cookie header management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Sign In (Local Supabase)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "apikey",
								"value": "{{supabase_anon_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{supabase_url}}/auth/v1/token?grant_type=password",
							"host": [
								"{{supabase_url}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    ",
									"    console.log('Authentication successful');",
									"    console.log('User ID:', response.user.id);",
									"    console.log('JWT token saved to environment');",
									"    console.log('Refresh token saved to environment');",
									"    console.log('Cookies will be set automatically by pre-request script');",
									"} else {",
									"    console.log('Authentication failed:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{supabase_anon_key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{supabase_url}}/auth/v1/user",
							"host": [
								"{{supabase_url}}"
							],
							"path": [
								"auth",
								"v1",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fuel Quality",
			"item": [
				{
					"name": "List Fuel Quality Data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-quality/list",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-quality",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Fuel Quality Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-quality/upload",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-quality",
								"upload"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fuel Inventory",
			"item": [
				{
					"name": "Get Fuel Types",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-inventory/fuel-types",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-inventory",
								"fuel-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port Names",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-inventory/port-names",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-inventory",
								"port-names"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Ship Names",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-inventory/ships-names",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-inventory",
								"ships-names"
							]
						}
					},
					"response": []
				},
				{
					"name": "Calculate and Save Fuel Inventory",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"shipName\": \"Test Ship\",\n  \"fuelType\": \"diesel\",\n  \"rob\": 500,\n  \"me\": 200,\n  \"ae\": 100,\n  \"boiler\": 50,\n  \"maxFuelCapacity\": 1000,\n  \"minFuelPolicy\": 100,\n  \"averageVoyagePeriod\": 7\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-inventory/calculate-and-save",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-inventory",
								"calculate-and-save"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Price Prediction",
			"item": [
				{
					"name": "Get Price Prediction Files",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/price-prediction",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"price-prediction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Price Prediction File",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/price-prediction",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"price-prediction"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ships Management",
			"item": [
				{
					"name": "Get All Ships",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ships",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Ship",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Ship\",\n  \"imoNumber\": \"IMO1234567\",\n  \"vesselType\": \"Container\",\n  \"capacity\": 5000,\n  \"fuelConsumptionRate\": 25.5,\n  \"fuel_types\": \"HFO,VLSFO,MGO\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ships",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ships"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.ship && response.ship.id) {",
									"        pm.environment.set('ship_id', response.ship.id);",
									"        console.log('Ship created successfully with ID:', response.ship.id);",
									"    }",
									"} else {",
									"    console.log('Failed to create ship:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Ship by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ships/{{ship_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ships",
								"{{ship_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Ship by Name",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ships/by-name/Test%20Ship",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ships",
								"by-name",
								"Test Ship"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Ship",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test Ship\",\n  \"imoNumber\": \"IMO1234567\",\n  \"vesselType\": \"Bulk Carrier\",\n  \"capacity\": 10000,\n  \"fuelConsumptionRate\": 30.0,\n  \"fuel_types\": \"HFO,MGO\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ships/{{ship_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ships",
								"{{ship_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Ship",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ships/{{ship_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ships",
								"{{ship_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Ship with HFO Only",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"HFO Only Ship\",\n  \"imoNumber\": \"IMO7654321\",\n  \"vesselType\": \"Tanker\",\n  \"capacity\": 30000,\n  \"fuelConsumptionRate\": 45.0,\n  \"fuel_types\": \"HFO\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ships",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Ship with VLSFO and MGO",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"VLSFO MGO Ship\",\n  \"imoNumber\": \"IMO9876543\",\n  \"vesselType\": \"Container\",\n  \"capacity\": 15000,\n  \"fuelConsumptionRate\": 35.0,\n  \"fuel_types\": \"VLSFO,MGO\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ships",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Invalid Fuel Type",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Invalid Fuel Ship\",\n  \"imoNumber\": \"IMO1111111\",\n  \"vesselType\": \"Bulk\",\n  \"capacity\": 20000,\n  \"fuelConsumptionRate\": 40.0,\n  \"fuel_types\": \"HFO,INVALID\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ships",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ships"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ports Management",
			"item": [
				{
					"name": "Get All Ports",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ports",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Port",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"shipId\": \"{{ship_id}}\",\n  \"portName\": \"Istanbul Port\",\n  \"etaDate\": \"2025-08-15T10:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ports",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ports"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.port && response.port.id) {",
									"        pm.environment.set('port_id', response.port.id);",
									"        console.log('Port created successfully with ID:', response.port.id);",
									"    }",
									"} else {",
									"    console.log('Failed to create port:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Port by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ports/{{port_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ports",
								"{{port_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port by Name",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ports/by-name/Test%20Port",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ports",
								"by-name",
								"Test Port"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Port",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test Port\",\n  \"location\": \"Istanbul, Turkey\",\n  \"country\": \"Turkey\",\n  \"fuelTypes\": [\"diesel\", \"gasoline\", \"heavy_fuel_oil\"]\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ports/{{port_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ports",
								"{{port_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Port",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/ports/{{port_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"ports",
								"{{port_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Calculated Ship Price Coefficient Management",
			"item": [
				{
					"name": "Get All Calculated Ship Price Coefficients",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/calculated-ship-price-coefficient",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"calculated-ship-price-coefficient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Calculated Ship Price Coefficient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.coefficient && response.coefficient.id) {",
									"        pm.environment.set('coefficient_id', response.coefficient.id);",
									"        console.log('Coefficient ID saved:', response.coefficient.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"shipId\": \"{{ship_id}}\",\n  \"priceIndex\": 1.25,\n  \"priceAndQualityIndicator\": \"HIGH\",\n  \"finalDecision\": \"APPROVED\",\n  \"bestPrice\": 850.50,\n  \"shipInventoryIndex\": 0.85,\n  \"qualityIndex\": 0.92,\n  \"fuelType\": \"diesel\",\n  \"port\": \"Istanbul Port\",\n  \"etaDate\": \"2025-08-15\",\n  \"priceDate\": \"2025-08-10\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/calculated-ship-price-coefficient",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"calculated-ship-price-coefficient"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fuel Quality Data Management",
			"item": [
				{
					"name": "Get All Fuel Quality Data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-quality/data",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-quality",
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Fuel Quality Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.fuelQualityData && response.fuelQualityData.id) {",
									"        pm.environment.set('fuel_quality_data_id', response.fuelQualityData.id);",
									"        console.log('Fuel Quality Data ID saved:', response.fuelQualityData.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"port\": \"Istanbul Port\",\n  \"supplier\": \"Test Supplier\",\n  \"date\": \"2025-08-15\",\n  \"fuelType\": \"diesel\",\n  \"grade\": \"A\",\n  \"densityFifteenC\": 0.85,\n  \"kViscosityFiftyC\": 2.5,\n  \"pourPoint\": -10.0,\n  \"ash\": 0.01,\n  \"waterContent\": 0.05,\n  \"sulphurContent\": 0.1,\n  \"vanadium\": 0.002,\n  \"sodium\": 0.001,\n  \"aluminiumSilicon\": 0.003,\n  \"totalAcidNumber\": 0.5,\n  \"ccai\": 850.0\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-quality/data",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-quality",
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fuel Quality Data by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-quality/data/{{fuel_quality_data_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-quality",
								"data",
								"{{fuel_quality_data_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Fuel Quality Data",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"port\": \"Updated Istanbul Port\",\n  \"supplier\": \"Updated Test Supplier\",\n  \"densityFifteenC\": 0.86,\n  \"sulphurContent\": 0.08\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-quality/data/{{fuel_quality_data_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-quality",
								"data",
								"{{fuel_quality_data_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Fuel Quality Data",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-quality/data/{{fuel_quality_data_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-quality",
								"data",
								"{{fuel_quality_data_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fuel Types Management",
			"item": [
				{
					"name": "Get All Fuel Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-types",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Fuel Type",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fuelTypeName\": \"Test Fuel Type\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-types",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-types"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has fuel type\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('fuelType');",
									"    pm.expect(responseJson.fuelType).to.have.property('id');",
									"    pm.expect(responseJson.fuelType).to.have.property('fuel_type_name', 'Test Fuel Type');",
									"    ",
									"    // Save fuel type ID for later use",
									"    pm.environment.set('fuel_type_id', responseJson.fuelType.id);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('message', 'Fuel type created successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Get Fuel Type by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-types/{{fuel_type_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-types",
								"{{fuel_type_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Fuel Type",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fuelTypeName\": \"Updated Test Fuel Type\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-types/{{fuel_type_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-types",
								"{{fuel_type_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Fuel Type",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/fuel-types/{{fuel_type_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"fuel-types",
								"{{fuel_type_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Port Fuel Quality Index Management",
			"item": [
				{
					"name": "Get All Port Fuel Quality Index",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-index",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-index"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Port Fuel Quality Index",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"qualityParameter\": \"Test Parameter\",\n  \"parCoefficient\": 0.850,\n  \"betweenMinAvg\": 0.840,\n  \"betweenAvgMax\": 0.860,\n  \"moreThanMax\": 0.870\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-index",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-index"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has port fuel quality index\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('portFuelQualityIndex');",
									"    pm.expect(responseJson.portFuelQualityIndex).to.have.property('id');",
									"    pm.expect(responseJson.portFuelQualityIndex).to.have.property('quality_parameter', 'Test Parameter');",
									"    pm.expect(responseJson.portFuelQualityIndex).to.have.property('par_coefficient', 0.850);",
									"    pm.expect(responseJson.portFuelQualityIndex).to.have.property('between_min_avg', 0.840);",
									"    pm.expect(responseJson.portFuelQualityIndex).to.have.property('between_avg_max', 0.860);",
									"    pm.expect(responseJson.portFuelQualityIndex).to.have.property('more_than_max', 0.870);",
									"    ",
									"    // Save port fuel quality index ID for later use",
									"    pm.environment.set('port_fuel_quality_index_id', responseJson.portFuelQualityIndex.id);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('message', 'Port fuel quality index created successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Get Port Fuel Quality Index by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-index/{{port_fuel_quality_index_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-index",
								"{{port_fuel_quality_index_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Port Fuel Quality Index",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"qualityParameter\": \"Updated Test Parameter\",\n  \"parCoefficient\": 0.900,\n  \"betweenMinAvg\": 0.890,\n  \"betweenAvgMax\": 0.910,\n  \"moreThanMax\": 0.920\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-index/{{port_fuel_quality_index_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-index",
								"{{port_fuel_quality_index_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Port Fuel Quality Index",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-index/{{port_fuel_quality_index_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-index",
								"{{port_fuel_quality_index_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Port Fuel Quality Value Management",
			"item": [
				{
					"name": "Get All Port Fuel Quality Value",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-value",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-value"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Port Fuel Quality Value",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"qualityParameter\": \"Test Parameter\",\n  \"parCoefficient\": 0.850,\n  \"betweenMinAvg\": 0.840,\n  \"betweenAvgMax\": 0.860,\n  \"moreThanMax\": 0.870,\n  \"fuelType\": \"Diesel\",\n  \"grade\": \"Premium\",\n  \"date\": \"2025-01-01\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-value",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-value"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has port fuel quality value\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('portFuelQualityValue');",
									"    pm.expect(responseJson.portFuelQualityValue).to.have.property('id');",
									"    pm.expect(responseJson.portFuelQualityValue).to.have.property('quality_parameter', 'Test Parameter');",
									"    pm.expect(responseJson.portFuelQualityValue).to.have.property('par_coefficient', 0.850);",
									"    pm.expect(responseJson.portFuelQualityValue).to.have.property('between_min_avg', 0.840);",
									"    pm.expect(responseJson.portFuelQualityValue).to.have.property('between_avg_max', 0.860);",
									"    pm.expect(responseJson.portFuelQualityValue).to.have.property('more_than_max', 0.870);",
									"    pm.expect(responseJson.portFuelQualityValue).to.have.property('fuel_type', 'Diesel');",
									"    pm.expect(responseJson.portFuelQualityValue).to.have.property('grade', 'Premium');",
									"    pm.expect(responseJson.portFuelQualityValue).to.have.property('date', '2025-01-01');",
									"    ",
									"    // Save port fuel quality value ID for later use",
									"    pm.environment.set('port_fuel_quality_value_id', responseJson.portFuelQualityValue.id);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('message', 'Port fuel quality value created successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Get Port Fuel Quality Value by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-value/{{port_fuel_quality_value_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-value",
								"{{port_fuel_quality_value_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Port Fuel Quality Value",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"qualityParameter\": \"Updated Test Parameter\",\n  \"parCoefficient\": 0.900,\n  \"betweenMinAvg\": 0.890,\n  \"betweenAvgMax\": 0.910,\n  \"moreThanMax\": 0.920,\n  \"fuelType\": \"Gasoline\",\n  \"grade\": \"Standard\",\n  \"date\": \"2025-01-02\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-value/{{port_fuel_quality_value_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-value",
								"{{port_fuel_quality_value_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Port Fuel Quality Value",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/port-fuel-quality-value/{{port_fuel_quality_value_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"port-fuel-quality-value",
								"{{port_fuel_quality_value_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Procurement Decisions Management",
			"item": [
				{
					"name": "Get All Procurement Decisions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/procurement-decisions",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"procurement-decisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Procurement Decision",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"portOfCall\": \"Rotterdam\",\n  \"eta\": \"2025-01-15\",\n  \"fuelType\": \"Diesel\",\n  \"priceIndex\": \"Brent\",\n  \"qualityIndex\": 85.5,\n  \"priceQualityIndicator\": \"Good\",\n  \"shipInventoryIndex\": 75.2,\n  \"finalDecision\": \"Purchase\",\n  \"bestPrice\": 850.50,\n  \"priceDate\": \"2025-01-01\",\n  \"shipId\": 1,\n  \"userId\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/procurement-decisions",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"procurement-decisions"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.procurementDecision && response.procurementDecision.id) {",
									"        pm.environment.set('procurement_decision_id', response.procurementDecision.id);",
									"        console.log('Procurement Decision created with ID:', response.procurementDecision.id);",
									"    }",
									"} else {",
									"    console.log('Failed to create procurement decision:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Procurement Decision by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/procurement-decisions/{{procurement_decision_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"procurement-decisions",
								"{{procurement_decision_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Procurement Decision",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"portOfCall\": \"Singapore\",\n  \"eta\": \"2025-01-20\",\n  \"fuelType\": \"Heavy Fuel Oil\",\n  \"priceIndex\": \"WTI\",\n  \"qualityIndex\": 72.3,\n  \"priceQualityIndicator\": \"Fair\",\n  \"shipInventoryIndex\": 68.1,\n  \"finalDecision\": \"Hold\",\n  \"bestPrice\": 720.30,\n  \"priceDate\": \"2025-01-01\",\n  \"shipId\": 2,\n  \"userId\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/procurement-decisions/{{procurement_decision_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"procurement-decisions",
								"{{procurement_decision_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Procurement Decision",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/procurement-decisions/{{procurement_decision_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"procurement-decisions",
								"{{procurement_decision_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Supply and Demand Data Management",
			"item": [
				{
					"name": "Get All Supply and Demand Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-data",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Supply and Demand Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"saudiProductionChange\": 0.5,\n  \"wtiProductionChange\": 1.2,\n  \"spareCapacity\": 2.1,\n  \"wtiGDPDeflated\": 75.50,\n  \"capacityPercentChange\": 0.8,\n  \"worldGDPChange\": 2.5,\n  \"nonOPECProductionChange\": 0.9,\n  \"opecDisruption\": 0.3,\n  \"nonOPECDisruption\": 0.2,\n  \"natGas\": 3.25,\n  \"gold\": 1950.00,\n  \"copper\": 4.50,\n  \"silver\": 25.75,\n  \"soy\": 12.80,\n  \"corn\": 4.20,\n  \"wheat\": 5.80,\n  \"sp500\": 4500.00,\n  \"dxy\": 105.50,\n  \"treasury\": 4.25,\n  \"treasuryTIPSInflationRate\": 2.10,\n  \"crudeOilImpliedVolatility\": 25.50,\n  \"openInterest\": 2500000,\n  \"moneyManagersLong\": 350000,\n  \"moneyManagersShort\": 120000,\n  \"moneyManagersNet\": 230000,\n  \"producersMerchantsLong\": 180000,\n  \"producersMerchantsShort\": 200000,\n  \"yoyOEDCConsumptionChange\": 1.2,\n  \"worldConsumptionChange\": 1.8,\n  \"nonOECDConsumptionGrowth\": 2.5,\n  \"inventoryChange\": -0.5,\n  \"spreadChange\": 0.3\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-data",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-data"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.supplyAndDemandData && response.supplyAndDemandData.id) {",
									"        pm.environment.set('supply_demand_data_id', response.supplyAndDemandData.id);",
									"        console.log('Supply and Demand Data created with ID:', response.supplyAndDemandData.id);",
									"    }",
									"} else {",
									"    console.log('Failed to create supply and demand data:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Supply and Demand Data by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-data/{{supply_demand_data_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-data",
								"{{supply_demand_data_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Supply and Demand Data",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"saudiProductionChange\": 0.7,\n  \"wtiProductionChange\": 1.5,\n  \"spareCapacity\": 2.3,\n  \"wtiGDPDeflated\": 76.80,\n  \"capacityPercentChange\": 1.0,\n  \"worldGDPChange\": 2.8,\n  \"nonOPECProductionChange\": 1.1,\n  \"opecDisruption\": 0.4,\n  \"nonOPECDisruption\": 0.3,\n  \"natGas\": 3.40,\n  \"gold\": 1980.00,\n  \"copper\": 4.65,\n  \"silver\": 26.00,\n  \"soy\": 13.00,\n  \"corn\": 4.25,\n  \"wheat\": 5.85,\n  \"sp500\": 4520.00,\n  \"dxy\": 105.80,\n  \"treasury\": 4.30,\n  \"treasuryTIPSInflationRate\": 2.15,\n  \"crudeOilImpliedVolatility\": 26.20,\n  \"openInterest\": 2520000,\n  \"moneyManagersLong\": 355000,\n  \"moneyManagersShort\": 122000,\n  \"moneyManagersNet\": 233000,\n  \"producersMerchantsLong\": 182000,\n  \"producersMerchantsShort\": 202000,\n  \"yoyOEDCConsumptionChange\": 1.3,\n  \"worldConsumptionChange\": 1.9,\n  \"nonOECDConsumptionGrowth\": 2.6,\n  \"inventoryChange\": -0.6,\n  \"spreadChange\": 0.35\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-data/{{supply_demand_data_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-data",
								"{{supply_demand_data_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Supply and Demand Data",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-data/{{supply_demand_data_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-data",
								"{{supply_demand_data_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Supply and Demand Second Data Management",
			"item": [
				{
					"name": "Get All Supply and Demand Second Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-second-data",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-second-data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Supply and Demand Second Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"densityFifteenC\": 0.9850,\n  \"kViscosityAtFifty\": 180.5,\n  \"pourPoint\": -12.0,\n  \"ash\": 0.05,\n  \"waterContent\": 0.15,\n  \"sulphurContent\": 2.8,\n  \"vanadium\": 150.0,\n  \"sodium\": 25.0,\n  \"aluminiumSilicon\": 15.0,\n  \"totalAcidNumber\": 2.5,\n  \"ccai\": 850.0\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-second-data",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-second-data"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.supplyAndDemandSecondData && response.supplyAndDemandSecondData.id) {",
									"        pm.environment.set('supply_demand_second_data_id', response.supplyAndDemandSecondData.id);",
									"        console.log('Supply and Demand Second Data created with ID:', response.supplyAndDemandSecondData.id);",
									"    }",
									"} else {",
									"    console.log('Failed to create supply and demand second data:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Supply and Demand Second Data by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-second-data/{{supply_demand_second_data_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-second-data",
								"{{supply_demand_second_data_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Supply and Demand Second Data",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"densityFifteenC\": 0.9870,\n  \"kViscosityAtFifty\": 185.2,\n  \"pourPoint\": -15.0,\n  \"ash\": 0.06,\n  \"waterContent\": 0.12,\n  \"sulphurContent\": 3.1,\n  \"vanadium\": 165.0,\n  \"sodium\": 30.0,\n  \"aluminiumSilicon\": 18.0,\n  \"totalAcidNumber\": 2.8,\n  \"ccai\": 870.0\n}"
						},
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-second-data/{{supply_demand_second_data_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-second-data",
								"{{supply_demand_second_data_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Supply and Demand Second Data",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/api/fuel-manager/supply-and-demand-second-data/{{supply_demand_second_data_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"api",
								"fuel-manager",
								"supply-and-demand-second-data",
								"{{supply_demand_second_data_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// This script runs before each request",
					"console.log('Request URL:', pm.request.url);",
					"console.log('Request method:', pm.request.method);",
					"console.log('Request host:', pm.request.url.getHost());",
					"console.log('Request path:', pm.request.url.getPath());",
					"",
					"// For app API requests, manually set cookie headers",
					"const requestUrl = pm.request.url.toString();",
					"const appUrl = pm.environment.get('app_url');",
					"console.log('Full request URL:', requestUrl);",
					"console.log('App URL from environment:', appUrl);",
					"",
					"// Check if this is an app API request (either by resolved URL or by path pattern)",
					"const isAppRequest = requestUrl.includes(appUrl) || requestUrl.includes('{{app_url}}') || pm.request.url.getPath().startsWith('/api/');",
					"console.log('Is app request:', isAppRequest);",
					"",
					"if (isAppRequest) {",
					"    console.log('Detected app API request - setting cookies and checking Authorization header');",
					"    const authToken = pm.environment.get('auth_token');",
					"    const refreshToken = pm.environment.get('refresh_token');",
					"    ",
					"    console.log('Auth token exists:', !!authToken);",
					"    console.log('Refresh token exists:', !!refreshToken);",
					"    ",
					"    if (authToken) {",
					"        // Remove any existing Cookie header",
					"        pm.request.headers.remove('Cookie');",
					"        ",
					"        // Build cookie string with simple format",
					"        let cookieString = `sb-access-token=${authToken}`;",
					"        if (refreshToken) {",
					"            cookieString += `; sb-refresh-token=${refreshToken}`;",
					"        }",
					"        ",
					"        // Add Cookie header",
					"        pm.request.headers.add({",
					"            key: 'Cookie',",
					"            value: cookieString",
					"        });",
					"        ",
					"        // Always set Authorization header",
					"        pm.request.headers.remove('Authorization');",
					"        pm.request.headers.add({",
					"            key: 'Authorization',",
					"            value: `Bearer ${authToken}`",
					"        });",
					"        console.log('Authorization header set:', `Bearer ${authToken.substring(0, 20)}...`);",
					"        ",
					"        console.log('Cookie header set:', cookieString);",
					"        console.log('All headers after setup:');",
					"        pm.request.headers.each(function(header) {",
					"            console.log('  ' + header.key + ': ' + header.value);",
					"        });",
					"    } else {",
					"        console.log('No auth token found in environment');",
					"    }",
					"} else {",
					"    console.log('Not an app API request - skipping setup');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000"
		}
	]
}
